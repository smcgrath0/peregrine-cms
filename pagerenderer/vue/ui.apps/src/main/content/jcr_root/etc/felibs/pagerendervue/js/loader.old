<!-- hook up routing of links -->
window.onclick = function(ev) {
    var currentServer = window.location.protocol+'//'+window.location.host+'/'
    if(ev.target.toString().startsWith(currentServer)) {
        gotoPath = '/'+ev.target.toString().slice(currentServer.length)
        loadContent(gotoPath)
        return false;
    }
}

window.onpopstate = function(ev) {

    console.log("%j", ev)
    if(ev.state && ev.state.peregrinevue) {
        loadContent(ev.state.path, false)
    } else {
        loadContent(document.location, false)
    }

}

<!-- variable to hold view of page -->
var perView = {};
var loadedComponents = {};
var peregrineApp;

function getPerView() {

    if(window.parent) {
        if(window.parent.perAdminView) {
            return window.parent.perAdminView.pageView
        }
    }
    return perView
}

<!-- initialization of peregrine vuejs renderer -->
function initPeregrineApp() {
    peregrineApp = new Vue({
        el: '#peregrine-app',
        data: getPerView()
    });
}

<!-- dynamic component initializer -->
function loadComponent(name) {
    if(!loadedComponents[name]) {
//        console.info('loading vuejs component %s', name)
        var segments = name.split('-')
        for(var i = 0; i < segments.length; i++) {
            segments[i] = segments[i].charAt(0).toUpperCase() + segments[i].slice(1)
        }
        if(window['cmp'+segments.join('')]) {
            Vue.component(name, window['cmp'+segments.join('')])
        }
        loadedComponents[name] = true
    } else {
//        console.info('component %s already present', name)
    }
}

<!-- tree walker -->
function walkTreeAndLoad(node) {

    if(node.component) loadComponent(node.component)
    if(node.children) {
        node.children.forEach(function (child) {
            walkTreeAndLoad(child)
        })
    }

}

function mergeRecursive(obj1, obj2) {

     for (var p in obj2) {
         try {
             // Property in destination object set; update its value.
             if ( typeof obj2[p] === 'object' ) {
                 if(obj2[p] instanceof Array) {
                     for(var pos = 0; pos < obj2[p].length; pos++) {
                        if(typeof obj2[p][pos] === 'object') {
                            var found = false
                            var path = obj2[p][pos].path
                            for(var i = 0; i < obj1[p].length; i++) {
                                if(obj1[p][i].path === path) {
                                    obj1[p][i] = mergeRecursive(obj1[p][i], obj2[p][pos])
                                    break
                                }
                            }
                            if(!found) {
                                obj1[p].push(obj2[p][pos])
                            }
                        }
                     }
                 } else {
                     obj1[p] = mergeRecursive(obj1[p], obj2[p]);
                 }
             } else {
                 obj1[p] = obj2[p];

             }

         } catch(e) {
             // Property in destination object not set; create it and set its value.
             obj1[p] = obj2[p];

         }
     }

     return obj1

}

function processLoadedContent(data, path, firstTime) {
        walkTreeAndLoad(data)

        loadComponent('pagerendervue-components-placeholder')
        getPerView().page = data;
        getPerView().status = 'loaded';
        if(firstTime) {
            initPeregrineApp();
        }

        if(document.location !== path) {
            history.pushState({peregrinevue:true, path: path}, path, path)
        }
}

<!-- simple data loader -->
function loadContent(path, firstTime = false) {
    console.log('loading content for %s', path)
    var dataUrl = (""+path).substring(0, (""+path).indexOf('.html')) + '.data.json';
    getPerView().status = undefined;
    axios.get(dataUrl).then(function (response) {
        console.log('got data for %s', path)

        if(response.data.template) {

            var pageData = response.data

            axios.get(response.data.template+'.data.json').then(function(response) {

                var templateData = response.data
                var mergedData = mergeRecursive(templateData, pageData)

                processLoadedContent(mergedData, path, firstTime)
            }).catch(function(error) {
                      console.log("error getting %s %j", dataUrl, error);
            })
        } else {
            processLoadedContent(response.data, path, firstTime)
        }

    }).catch(function(error) {
        console.log("error getting %s %j", dataUrl, error);
    });
}
